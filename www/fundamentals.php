<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PHP funds</title>
</head>
<body>
    <h1>Основы языка РНР</h1>
    <h2>Общая характеристика</h2>
    <p>
        Процедурный язык интерпретируемого (REPL Read-Eval-Print-Loop) типа.         
        Синтаксический анализатор проверяет файл-скрипт при открытии, но ошибки 
        в коде проявляются при выполнении. 
        Типизация - динамическая. 
        Есть поддержка ООП. 
        Однопоточный. Есть расширения для многоточных вариантов, но 
        они менее популярны. 
    </p>
    <h2>Переменные</h2>
    <p>
        Переменные появляются в момент первого присваивания. 
        Имя переменной обязательно начинается с "$".
        Область видимости переменной - глобальная, функции создают
        свои области видимости. Видимость переменной НЕ ограничивается
        файлом, все подключенные файлы "видят" переменные. 
    </p>
    <p>
        В силу "глобальной" видимости в подключаемых файлах (во всех файлах)
        желательно проверять не влияем ли мы на переменную окружения. 
        isset( имя ) - проверяет определена ли переменная (не создавая
        ошибку обращения к несуществующей переменной)
        unset( имя ) - разрушение переменной, можно использовать если 
        необходимо быть уверенным в том, что ранее переменной не было. 
        Положительный аспект - по наличию установленной переменной можно 
        определить подключается файл к другому файлу или вызывается самостоятельно. 
    </p>
    <h2>Массивы</h2>
    <p>
        Массивы в РНР ассоциативные
    </p>
<div style="border: 1px solid green">
<?php 
    $x = 20 ;
    $x += 10 ;   // арифметический "+"
    $x .= '.' ;  // строковый "+" - "."
    $x .= '12' ;
    if( isset( $x ) ) {
        echo "X already defined: $x ",
             is_numeric( $x ) ? "Numeric" : "NaN" ;
    } 
    else {
        print( '<script>console.log( "X not defined" )</script>' ) ;
        echo "X not defined" ;
    }
    echo "<br/>" ;
    # Arrays
    $arr = [] ;        // новый стиль
    $arr2 = array() ;  // старый стиль
    $arr[] = 10 ;      //  push - добавление в массив
    $arr[] = 20 ;      //  без указания индекса - присваиваются 
    $arr[] = 30 ;      //  порядковые числовые индексы

    foreach( $arr as $val ) {   // for-of (по значениям)
        echo "$val <br/>" ;
    }

    $arr[10] = 'ten' ;  // указание индекса-ключа 
    $arr['five'] = 5 ;
    $arr[] = 'next' ;
    $arr['2'] = 200 ;   // 2 (число) и '2' (строка) - одно и то же
    $arr[true] = 'true' ;  // true == 1
    $arr['true'] = true ;
    foreach( $arr as $key => $val ) {  // по парам ключ-значение
        echo "arr[$key] = $val <br/>" ;
    }

    $arr3 = [  // конструктор массива
        'host' => 'localhost',  // => - ассоциативное присваивание
        'ip'   => '127.0.0.1',
        'auth' => [
            'user' => 'admin',
            'pass' => '123'
        ]
    ] ;
    echo count( $arr3 ), '<br/>' ;
    foreach( $arr3 as $key => $val ) {
        if( is_array( $val ) ) {   // если значение в массиве - тоже массив
            foreach( $val as $k => $v ) {
                echo "arr[$key][$k] = $v <br/>" ;
            }
        }
        else {
            echo "arr[$key] = $val <br/>" ;
        }
    }
    // внутренняя индексация - дополнительные [], вложенность не ограничена
    // $arr3['auth']['pass'] 
    const CONST_VALUE = 100500 ;  // константа без $, рекомендуется CAPITAL_CASE
    echo CONST_VALUE, '<br/>' ;

    echo makeHello(), ' ', makeHello( "User" ), '<br/>' ;

    // принцип "поднятия" работает - можно вызывать до определения (в файле)
    function makeHello( $user = "Admin" ) {  // значения по умолчанию есть
        global $x ;  // для использования глобальной пер. указываем global
        return "Hello $user " 
                . CONST_VALUE   // константы доступны 
                . $x ;          // переменные (просто) недоступны
    }
?>
</div>

</body>
</html>